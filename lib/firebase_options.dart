// File generated by FlutterFire CLI.
// ignore_for_file: lines_longer_than_80_chars, avoid_classes_with_only_static_members
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;

class DefaultFirebaseOptions {
  static FirebaseOptions currentPlatform(config) {
    if (kIsWeb) {
      return FirebaseOptions(
        apiKey: config['WEB_API_KEY'],
        appId: config['WEB_APP_ID'],
        messagingSenderId: config['MESSAGING_SENDER_ID'],
        projectId: config['PROJECT_ID'],
        authDomain: config['WEB_AUTH_DOMAIN'],
        storageBucket: config['STORAGE_BUCKET'],
        measurementId: config['WEB_MEASUREMENT_ID']
      );
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return FirebaseOptions(
          apiKey: config['ANDROID_API_KEY'],
          appId: config['ANDROID_APP_ID'],
          messagingSenderId: config['MESSAGING_SENDER_ID'],
          projectId: config['PROJECT_ID'],
          storageBucket: config['STORAGE_BUCKET']
        );
      case TargetPlatform.iOS:
        return FirebaseOptions(
          apiKey: config['IOS_API_KEY'],
          appId: config['IOS_APP_ID'],
          messagingSenderId: config['MESSAGING_SENDER_ID'],
          projectId: config['PROJECT_ID'],
          storageBucket: config['STORAGE_BUCKET'],
          androidClientId: config['IOS_ANDROID_CLIENT_ID'],
          iosClientId: config['IOS_CLIENT_ID'],
          iosBundleId: config['IOS_BUNDLE_ID']
        );
      case TargetPlatform.macOS:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for macos - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.windows:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for windows - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }
}
